'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ByteBuffer = require('bytebuffer');
var debug = require('debug')('packet-frame:subclass');
var BB = (function (_super) {
    __extends(BB, _super);
    function BB(capacity, littleEndian, noAssert) {
        _super.call(this, capacity, littleEndian, noAssert);
    }
    BB.prototype.printDebug = function (out) {
        _super.prototype.printDebug.call(this, debug);
    };
    BB.prototype.readBytes = function (length, offset) {
        length = length !== void 0 ? length : this.limit;
        offset = offset !== void 0 ? offset : (this.offset += length) - length;
        var out = (new this.constructor(length, this.littleEndian));
        for (var i = 0; i < length; i++) {
            out.writeByte(this.readByte(offset + i));
        }
        out.flip();
        return out;
    };
    BB.prototype.refresh = function (toBegin) {
        if (toBegin === void 0) { toBegin = false; }
        this.resize((typeof this.buffer === 'undefined' || this.buffer === null) ? 0 : this.limit);
        if (toBegin === true) {
            this.offset = 0;
        }
        return this;
    };
    BB._patch = function (instance) {
        instance.readBytes = this.prototype.readBytes;
        instance.refresh = this.prototype.refresh;
        instance.printDebug = this.prototype.printDebug;
        return instance;
    };
    BB.allocate = function (capacity, littleEndian, noAssert) {
        return this._patch(_super.allocate.call(this, capacity, littleEndian, noAssert));
    };
    BB.wrap = function (buffer, enc, littleEndian, noAssert) {
        return this._patch(_super.wrap.call(this, buffer, enc, littleEndian, noAssert));
    };
    BB.concat = function (buffers, encoding, litteEndian, noAssert) {
        return this._patch(_super.concat.call(this, buffers, encoding, litteEndian, noAssert));
    };
    return BB;
})(ByteBuffer);
exports.BB = BB;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViY2xhc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc3ViY2xhc3MudHMiXSwibmFtZXMiOlsiQkIiLCJCQi5jb25zdHJ1Y3RvciIsIkJCLnByaW50RGVidWciLCJCQi5yZWFkQnl0ZXMiLCJCQi5yZWZyZXNoIiwiQkIuX3BhdGNoIiwiQkIuYWxsb2NhdGUiLCJCQi53cmFwIiwiQkIuY29uY2F0Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7Ozs7OztBQUViLElBQU8sVUFBVSxXQUFXLFlBQVksQ0FBQyxDQUFDO0FBRTFDLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0FBRXREO0lBQXdCQSxzQkFBVUE7SUFDOUJBLFlBQVlBLFFBQWlCQSxFQUFFQSxZQUFzQkEsRUFBRUEsUUFBa0JBO1FBQ3JFQyxrQkFBTUEsUUFBUUEsRUFBRUEsWUFBWUEsRUFBRUEsUUFBUUEsQ0FBQ0EsQ0FBQ0E7SUFDNUNBLENBQUNBO0lBRURELHVCQUFVQSxHQUFWQSxVQUFXQSxHQUE4QkE7UUFDckNFLGdCQUFLQSxDQUFDQSxVQUFVQSxZQUFDQSxLQUFLQSxDQUFDQSxDQUFDQTtJQUM1QkEsQ0FBQ0E7SUFFREYsc0JBQVNBLEdBQVRBLFVBQVVBLE1BQWVBLEVBQUVBLE1BQWVBO1FBQ3RDRyxNQUFNQSxHQUFHQSxNQUFNQSxLQUFLQSxLQUFLQSxDQUFDQSxHQUFHQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQTtRQUNqREEsTUFBTUEsR0FBR0EsTUFBTUEsS0FBS0EsS0FBS0EsQ0FBQ0EsR0FBR0EsTUFBTUEsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsSUFBSUEsTUFBTUEsQ0FBQ0EsR0FBR0EsTUFBTUEsQ0FBQ0E7UUFFdkVBLElBQUlBLEdBQUdBLEdBQU9BLENBQUNBLElBQVVBLElBQUtBLENBQUNBLFdBQVdBLENBQUNBLE1BQU1BLEVBQUVBLElBQUlBLENBQUNB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
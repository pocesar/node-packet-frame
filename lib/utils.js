'use strict';
var crypto_1 = require('crypto');
var Magic = require('./magic');
var subclass_1 = require('./subclass');
var debug = require('debug')('packet-frame:utils');
var CRC32Table = (function () {
    var c;
    var n;
    var crcTable = [];
    for (n = 0; n < 256; n++) {
        c = n;
        for (var k = 0; k < 8; k++) {
            c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
        }
        crcTable[n] = c;
    }
    return crcTable;
})();
function unwrapPayloads(buffer, process) {
    var out = [], payload;
    if (Buffer.isBuffer(buffer)) {
        buffer = subclass_1.BB.wrap(buffer);
    }
    if (subclass_1.BB.isByteBuffer(buffer)) {
        buffer.mark(0);
        if (buffer.buffer.byteLength > Magic.instance.sizeofHeader) {
            while (buffer.buffer.byteLength - buffer.markedOffset > 0) {
                if ((payload = Magic.instance.getAll(buffer))) {
                    out.push(process ? process(payload.data) : payload.data);
                    buffer.mark(buffer.markedOffset + payload.size + Magic.instance.sizeofHeader);
                }
                else {
                    buffer.mark(buffer.markedOffset + 1);
                }
            }
        }
    }
    return out;
}
exports.unwrapPayloads = unwrapPayloads;
function wrapPayloads(buffer) {
    if (Array.isArray(buffer)) {
        var b = new subclass_1.BB(Magic.instance.sizeofHeader * buffer.length);
        buffer.forEach(function (buf) {
            b.append(wrapPayloads(buf));
        });
        b.compact();
        return b;
    }
    else {
        if (subclass_1.BB.isByteBuffer(buffer)) {
            buffer = buffer.toBuffer();
        }
        var dataBuffer = new subclass_1.BB(Magic.instance.sizeofHeader + buffer.length);
        Magic.instance.setAll(dataBuffer, buffer, buffer.length);
        return dataBuffer;
    }
}
exports.wrapPayloads = wrapPayloads;
function _quickCRC32(input, len, check) {
    var crc;
    var result;
    if (Buffer.isBuffer(input) || typeof input === 'string') {
        input = subclass_1.BB.wrap(input);
    }
    if (subclass_1.BB.isByteBuffer(input)) {
        //input.refresh(true);
        if (!len) {
            len = input.buffer.byteLength;
        }
    }
    else {
        throw new Error('input needs to be either a Buffer, ByteBuffer or string');
    }
    crc = 0 ^ (-1);
    for (var i = 0; i < len; i++) {
        crc = (crc >>> 8) ^ CRC32Table[(crc ^ (input.readUint8(i))) & 0xFF];
    }
    result = (crc ^ (-1)) >>> 0;
    return check === void 0 ? result : result === check;
}
exports._quickCRC32 = _quickCRC32;
function _quickMD5Hash(value) {
    return crypto_1.createHash('md5').update(value).digest('hex');
}
exports._quickMD5Hash = _quickMD5Hash;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOlsidW53cmFwUGF5bG9hZHMiLCJ3cmFwUGF5bG9hZHMiLCJfcXVpY2tDUkMzMiIsIl9xdWlja01ENUhhc2giXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUdiLHVCQUEyQixRQUFRLENBQUMsQ0FBQTtBQUNwQyxJQUFZLEtBQUssV0FBTSxTQUFTLENBQUMsQ0FBQTtBQUNqQyx5QkFBaUMsWUFBWSxDQUFDLENBQUE7QUFFOUMsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFFbkQsSUFBSSxVQUFVLEdBQWEsQ0FBQztJQUN4QixJQUFJLENBQVMsQ0FBQztJQUNkLElBQUksQ0FBUyxDQUFDO0lBQ2QsSUFBSSxRQUFRLEdBQWEsRUFBRSxDQUFDO0lBRTVCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ3ZCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDTixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDekIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pELENBQUM7UUFDRCxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3BCLENBQUM7SUFDRCxNQUFNLENBQUMsUUFBUSxDQUFDO0FBQ3BCLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFFTCx3QkFBa0MsTUFBMkIsRUFBRSxPQUE2QjtJQUN4RkEsSUFBSUEsR0FBR0EsR0FBUUEsRUFBRUEsRUFBRUEsT0FBd0JBLENBQUNBO0lBRTVDQSxFQUFFQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUMxQkEsTUFBTUEsR0FBR0EsYUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7SUFDckNBLENBQUNBO0lBRURBLEVBQUVBLENBQUNBLENBQUNBLGFBQVVBLENBQUNBLFlBQVlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQ2xDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUVmQSxFQUFFQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxVQUFVQSxHQUFHQSxLQUFLQSxDQUFDQSxRQUFRQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUN6REEsT0FBT0EsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsVUFBVUEsR0FBR0EsTUFBTUEsQ0FBQ0EsWUFBWUEsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0E7Z0JBQ3hEQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxPQUFPQSxHQUFHQSxLQUFLQSxDQUFDQSxRQUFRQSxDQUFDQSxNQUFNQSxDQUFJQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFDL0NBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLE9BQU9BLENBQU1BLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLENBQUNBO29CQUM5REEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsWUFBWUEsR0FBR0EsT0FBT0EsQ0FBQ0EsSUFBSUEsR0FBR0EsS0FBS0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ2xGQSxDQUFDQTtnQkFBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7b0JBQ0pBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLFlBQVlBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO2dCQUN6Q0EsQ0FBQ0E7WUFDTEEsQ0FBQ0E7UUFDTEEsQ0FBQ0E7SUFDTEEsQ0FBQ0E7SUFFREEsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0E7QUFDZkEsQ0FBQ0E7QUF2QmUsc0JBQWMsaUJBdUI3QixDQUFBO0FBRUQsc0JBQWdDLE1BQXNDO0lBQ2xFQyxFQUFFQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxPQUFPQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN4QkEsSUFBSUEsQ0FBQ0EsR0FBR0EsSUFBSUEsYUFBVUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsWUFBWUEsR0FBY0EsTUFBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7UUFFckVBLE1BQU9BLENBQUNBLE9BQU9BLENBQUNBLFVBQVNBLEdBQUdBO1lBQ25DLENBQUMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDaEMsQ0FBQyxDQUFDQSxDQUFDQTtRQUVIQSxDQUFDQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQTtRQUVaQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUNiQSxDQUFDQTtJQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUNKQSxFQUFFQSxDQUFDQSxDQUFDQSxhQUFVQSxDQUFDQSxZQUFZQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNsQ0EsTUFBTUEsR0FBc0JBLE1BQU9BLENBQUNBLFFBQVFBLEVBQUdBLENBQUNBO1FBQ3BEQSxDQUFDQTtRQUVEQSxJQUFJQSxVQUFVQSxHQUFHQSxJQUFJQSxhQUFVQSxDQUFDQSxLQUFLQSxDQUFDQSxRQUFRQSxDQUFDQSxZQUFZQSxHQUFZQSxNQUFPQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUV2RkEsS0FBS0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsTUFBTUEsQ0FBSUEsVUFBVUEsRUFBV0EsTUFBT0EsRUFBV0EsTUFBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7UUFFaEZBLE1BQU1BLENBQUNBLFVBQVVBLENBQUNBO0lBQ3RCQSxDQUFDQTtBQUNMQSxDQUFDQTtBQXRCZSxvQkFBWSxlQXNCM0IsQ0FBQTtBQU1ELHFCQUE0QixLQUFpQixFQUFFLEdBQVksRUFBRSxLQUFXO0lBQ3BFQyxJQUFJQSxHQUFXQSxDQUFDQTtJQUNoQkEsSUFBSUEsTUFBY0EsQ0FBQ0E7SUFFbkJBLEVBQUVBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBLFFBQVFBLENBQUNBLEtBQUtBLENBQUNBLElBQUlBLE9BQU9BLEtBQUtBLEtBQUtBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBO1FBQ3REQSxLQUFLQSxHQUFHQSxhQUFVQSxDQUFDQSxJQUFJQSxDQUFNQSxLQUFLQSxDQUFDQSxDQUFDQTtJQUN4Q0EsQ0FBQ0E7SUFFREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsYUFBVUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDakNBLHNCQUFzQkE7UUFFdEJBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1lBQ1BBLEdBQUdBLEdBQUdBLEtBQUtBLENBQUNBLE1BQU1BLENBQUNBLFVBQVVBLENBQUNBO1FBQ2xDQSxDQUFDQTtJQUNMQSxDQUFDQTtJQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUNKQSxNQUFNQSxJQUFJQSxLQUFLQSxDQUFDQSx5REFBeURBLENBQUNBLENBQUNBO0lBQy9FQSxDQUFDQTtJQUVEQSxHQUFHQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUVmQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxHQUFHQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTtRQUMzQkEsR0FBR0EsR0FBR0EsQ0FBQ0EsR0FBR0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsVUFBVUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBY0EsS0FBTUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7SUFDdEZBLENBQUNBO0lBRURBLE1BQU1BLEdBQUdBLENBQUNBLEdBQUdBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO0lBRTVCQSxNQUFNQSxDQUFDQSxLQUFLQSxLQUFLQSxLQUFLQSxDQUFDQSxHQUFHQSxNQUFNQSxHQUFHQSxNQUFNQSxLQUFLQSxLQUFLQSxDQUFDQTtBQUN4REEsQ0FBQ0E7QUEzQmUsbUJBQVcsY0EyQjFCLENBQUE7QUFFRCx1QkFBOEIsS0FBc0I7SUFDaERDLE1BQU1BLENBQUNBLG1CQUFVQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQTtBQUN6REEsQ0FBQ0E7QUFGZSxxQkFBYSxnQkFFNUIsQ0FBQSJ9
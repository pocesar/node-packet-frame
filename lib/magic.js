'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var utils_1 = require('./utils');
var debug = require('debug')('packet-frame:magic');
var SizeOffset = function (size, offset) {
    return function (target, propertyKey, descriptor) {
        var sizes = {
            size: size,
            offset: offset
        };
        if (!('_sizes' in target)) {
            target['_sizes'] = {};
        }
        target['_sizes'][propertyKey] = sizes;
        return descriptor;
    };
};
var Magic = (function () {
    function Magic(debug, magicVersion) {
        var _this = this;
        if (debug === void 0) { debug = false; }
        if (magicVersion === void 0) { magicVersion = 0x02; }
        this.debug = debug;
        this.magicVersion = magicVersion;
        this.sizeofHeader = 0;
        this.MAX_SIZE = 0;
        this.sizeofHeader = (function () {
            var total = 0;
            for (var i in _this._sizes) {
                total += _this._sizes[i].size;
            }
            return total;
        })();
        this.MAX_SIZE = (function () {
            return _this.sizeofHeader + Math.pow(2, _this._sizes['size'].size * 8);
        })();
    }
    Magic.prototype.getOffset = function (buffer, offset) {
        if (buffer.markedOffset > -1) {
            return buffer.markedOffset + offset;
        }
        else {
            return offset;
        }
    };
    Magic.prototype.version = function (buffer, version) {
        var offset = this._sizes['version'].offset;
        buffer.offset += this._sizes['version'].size;
        if (version !== void 0) {
            version = version === true ? this.magicVersion : version;
            buffer.writeUint8(version, offset);
            return version;
        }
        else {
            try {
                return buffer.readUint8(this.getOffset(buffer, offset));
            }
            catch (e) {
                /*istanbul ignore next:not needed to be tested*/
                if (this.debug) {
                    throw e;
                }
            }
            return null;
        }
    };
    /**
     * Compare the versions
     */
    Magic.prototype.checkVersion = function (buffer, version) {
        return this.version(buffer) === (version || this.magicVersion);
    };
    Magic.prototype.dataChecksum = function (buffer, data, length) {
        var offset = this._sizes['dataChecksum'].offset;
        buffer.offset += this._sizes['dataChecksum'].size;
        if (data !== void 0) {
            var hash = utils_1._quickCRC32(data, length);
            buffer.writeUint32(hash, offset);
            return hash;
        }
        else {
            try {
                return buffer.readUint32(this.getOffset(buffer, offset));
            }
            catch (e) {
                /*istanbul ignore next:not needed to be tested*/
                if (this.debug) {
                    throw e;
                }
            }
            return null;
        }
    };
    Magic.prototype.checkDataCS = function (buffer, len, chksum) {
        var length = len || this.size(buffer);
        if (!length || length > (buffer && buffer.limit)) {
            return null;
        }
        var data;
        try {
            data = buffer.readBytes(length, this.getOffset(buffer, this.sizeofHeader));
        }
        catch (e) {
            /*istanbul ignore next:not needed to be tested*/
            if (this.debug) {
                throw e;
            }
            return null;
        }
        return utils_1._quickCRC32(data, len, chksum || this.dataChecksum(buffer, null, len)) && data;
    };
    Magic.prototype.size = function (buffer, length) {
        var offset = this._sizes['size'].offset;
        buffer.offset += this._sizes['size'].size;
        if (length !== void 0) {
            buffer.writeUint16(length, offset);
            return length;
        }
        else {
            try {
                return buffer.readUint16(this.getOffset(buffer, offset));
            }
            catch (e) {
                /*istanbul ignore next:not needed to be tested*/
                if (this.debug) {
                    throw e;
                }
            }
            return null;
        }
    };
    Magic.prototype.headerChecksum = function (buffer, header) {
        var offset = this._sizes['headerChecksum'].offset;
        buffer.offset += this._sizes['headerChecksum'].size;
        if (header) {
            var len = this.sizeofHeader - this._sizes['headerChecksum'].size;
            var hash = utils_1._quickCRC32(header.readBytes(len, 0), len);
            buffer.writeUint32(hash, offset);
            return hash;
        }
        else {
            try {
                return buffer.readUint32(this.getOffset(buffer, offset));
            }
            catch (e) {
                /*istanbul ignore next:not needed to be tested*/
                if (this.debug) {
                    throw e;
                }
            }
            return null;
        }
    };
    Magic.prototype.checkHeaderCS = function (buffer, chksum) {
        var header;
        try {
            var len = this.sizeofHeader - this._sizes['headerChecksum'].size;
            header = buffer.readBytes(len, this.getOffset(buffer, 0));
        }
        catch (e) {
            /*istanbul ignore next:not needed to be tested*/
            if (this.debug) {
                throw e;
            }
            return null;
        }
        return utils_1._quickCRC32(header, header.limit, chksum || this.headerChecksum(buffer));
    };
    Magic.prototype.payload = function (buffer, data, length) {
        var offset = this.sizeofHeader;
        length = length || (data && data.length);
        try {
            if (this.size(buffer, length)) {
                buffer.offset += length;
                buffer.append(data, offset);
            }
            else {
                return null;
            }
        }
        catch (e) {
            /*istanbul ignore next:not needed to be tested*/
            if (this.debug) {
                throw e;
            }
            return null;
        }
        return length;
    };
    Magic.prototype.getAll = function (buffer) {
        var version = this.version(buffer);
        if (version !== this.magicVersion) {
            /*istanbul ignore next:not needed to be tested*/
            if (this.debug) {
                buffer.printDebug();
                throw new Error('Version mismatch ' + version + ' != ' + this.magicVersion);
            }
            return null;
        }
        var headerChecksum = this.headerChecksum(buffer);
        if (!this.checkHeaderCS(buffer, headerChecksum)) {
            /*istanbul ignore next:not needed to be tested*/
            if (this.debug) {
                buffer.printDebug();
                throw new Error('Invalid header checksum ' + headerChecksum);
            }
            return null;
        }
        var size = this.size(buffer);
        if (!size) {
            /*istanbul ignore next:not needed to be tested*/
            if (this.debug) {
                buffer.printDebug();
                throw new Error('Invalid length ' + size);
            }
            return null;
        }
        var dataChecksum = this.dataChecksum(buffer, null, size);
        if (!dataChecksum) {
            /*istanbul ignore next:not needed to be tested*/
            if (this.debug) {
                buffer.printDebug();
                throw new Error('Invalid data checksum ' + dataChecksum);
            }
            return null;
        }
        var data = this.checkDataCS(buffer, size, dataChecksum);
        if (!data) {
            /*istanbul ignore next:not needed to be tested*/
            if (this.debug) {
                buffer.printDebug();
                throw new Error('Invalid data');
            }
            return null;
        }
        return {
            version: version,
            dataChecksum: dataChecksum,
            headerChecksum: headerChecksum,
            size: size,
            data: data
        };
    };
    Magic.prototype.setAll = function (dataBuffer, data, length) {
        if (!data || !dataBuffer) {
            throw new Error('Empty data');
        }
        if ((length || data.length) > this.MAX_SIZE) {
            throw new Error('Packet MAX_SIZE is ' + this.MAX_SIZE + ' bytes');
        }
        if ((length || data.length) <= 0) {
            throw new Error('Invalid data length of ' + (length || data.length) + ' bytes');
        }
        dataBuffer.mark(0).reset();
        var version = this.version(dataBuffer, true);
        var dataChecksum = this.dataChecksum(dataBuffer, data, length);
        var size = this.payload(dataBuffer, data, length);
        var headerChecksum = this.headerChecksum(dataBuffer, dataBuffer);
        dataBuffer.compact();
        return {
            version: version,
            dataChecksum: dataChecksum,
            size: size,
            headerChecksum: headerChecksum
        };
    };
    __decorate([
        SizeOffset(1, 0)
    ], Magic.prototype, "version", null);
    __decorate([
        SizeOffset(4, 1)
    ], Magic.prototype, "dataChecksum", null);
    __decorate([
        SizeOffset(2, 5)
    ], Magic.prototype, "size", null);
    __decorate([
        SizeOffset(4, 7)
    ], Magic.prototype, "headerChecksum", null);
    return Magic;
})();
exports.Magic = Magic;
exports.instance = new Magic();
//# sourceMappingURL=data:application/json;base64,